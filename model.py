from __future__ import division
#python scripts
__author__='Du Jiawei'
#Descrption:
from keras import backend as K
K.set_image_dim_ordering('tf')
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.models import load_model
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D,ZeroPadding2D,AveragePooling2D
from keras.layers.convolutional import Convolution1D, MaxPooling1D,ZeroPadding1D,AveragePooling1D
from keras.layers.normalization import BatchNormalization
from keras.optimizers import SGD, RMSprop

from keras.utils import np_utils, generic_utils
from keras.preprocessing.image import ImageDataGenerator


import xgboost as xgb
import matplotlib
import numpy as np
import getdata
import os.path as osp
matplotlib.use('agg')
import pickle
from sklearn.metrics import accuracy_score


def getModel(load_model=None):

    model = Sequential()

    model.add(Convolution1D(3,(5),padding='valid',input_shape=(1024,1)))
    model.add(BatchNormalization())
    model.add(Activation('relu'))


    model.add(Convolution1D(3,(5),padding='valid'))
    model.add(BatchNormalization())
    model.add(Activation('relu'))

    model.add(MaxPooling1D(pool_size=(2)))

    # model.add(Convolution1D(64,(3),padding='same'))
    # model.add(BatchNormalization())
    # model.add(Activation('relu'))


    # model.add(Convolution1D(64,(3),padding='same'))
    # model.add(BatchNormalization())
    # model.add(Activation('relu'))

    # model.add(MaxPooling1D(pool_size=(2)))



    model.add(Flatten())
    # model.add(Dense(64,activation="relu"))
    # model.add(Dropout(0.5))
    model.add(Dense(8,activation="relu"))
    # model.add(Dropout(0.5))
    model.add(Dense(2,activation="softmax"))


    print model.summary()
    if load_model!=None:
        model.load_weights(load_model)
        print "model of {} loaded".format(load_model)

    return model


def main():
    load_model = False
    model_save =  "data/xgb.dat"

    (x,y),(x_t, y_t) = getdata.get_data(size=10000,test_size=0.2)
    x=x.reshape((-1,1024,1))
    x_t=x_t.reshape((-1,1024,1))

    y = np_utils.to_categorical(y,2)
    y_t = np_utils.to_categorical(y_t,2)
    print "data loaded"
    model = getModel()
    model.compile(loss="binary_crossentropy",optimizer="Adam",metrics=['accuracy'])

    model.fit(x=x,y=y,batch_size=128,epochs=40,validation_data=(x_t,y_t))
    print "model training finished and saved"
    
    print "acry is ",test_accuracy(model,X_test,Y_test)

def test_accuracy(clf,x,y):
    threh = 0.5
    y_pred = clf.predict(x)
    y_pred[y_pred>threh] = 1
    y_pred[y_pred<threh] = 0
    acry = accuracy_score(y,y_pred)
    return acry
if __name__ == '__main__':
    main()
